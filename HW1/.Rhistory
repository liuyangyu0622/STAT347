# Make the sample into a nx2 matrix
dd=t(matrix(unlist(ss),nrow=2,ncol=n))
# Make the sampled list into a data frame with counts for each concentration
# level found in the sample
ee=table(dd[,1],dd[,2])
# Reestimate the model from the resampled data.
glmsam2=glm(ee[,1:2]~dose$logdose,family=binomial())
cfsnon[j,]=glmsam2$coefficients
}
ee
dd
ee
data
for (j in seq(sampsize))
{
n=length(data)
ss=sample(data,n,replace=TRUE)
# Make the sample into a nx2 matrix
dd=t(matrix(unlist(ss),nrow=2,ncol=n))
# Make the sampled list into a data frame with counts for each concentration
# level found in the sample
ee=table(dd[,1],dd[,2])
# Reestimate the model from the resampled data.
glmsam2=glm(ee[,1:2]~dose$logdose,family=binomial())
cfsnon[j,]=glmsam2$coefficients
}
ee
dd
for (j in seq(sampsize))
{
n=length(data)
ss=sample(data,n,replace=TRUE)
# Make the sample into a nx2 matrix
dd=t(matrix(unlist(ss),nrow=2,ncol=n))
# Make the sampled list into a data frame with counts for each concentration
# level found in the sample
ee=table(dd[,1],dd[,2])
# Reestimate the model from the resampled data.
glmsam2=glm(ee[,1:2]~dose$logdose,family=binomial())
cfsnon[j,]=glmsam2$coefficients
}
ee
nrows=dim(bwm)[1]
aa=sapply(1:nrows,pr<-function(x) rep(bwm$lconc[x],bwm$exposed[x]),simplify="array")
aaa=unlist(aa)
bb=sapply(1:nrows,pr<-function(x) c(rep(1,bwm$affected[x]),rep(0,bwm$unaffected[x])),simplify="array")
bbb=unlist(bb)
casebwm=cbind(aaa,bbb)
data=split(casebwm,row(casebwm))
sampsize=2000
cfsnon=matrix(rep(0,sampsize*2),c(sampsize,2))
for (j in seq(sampsize))
{
n=length(data)
ss=sample(data,n,replace=TRUE)
# Make the sample into a nx2 matrix
dd=t(matrix(unlist(ss),nrow=2,ncol=n))
# Make the sampled list into a data frame with counts for each concentration
# level found in the sample
ee=table(dd[,1],dd[,2])
# Reestimate the model from the resampled data.
wm=glm(ee[,1:2]~bwm$lconc,family=binomial())
cfsnon[j,]=wm$coefficients
}
ee
bb
nrows=dim(dose)[1]
aa=sapply(1:nrows,pr<-function(x) rep(dose$logdose[x],dose$total[x]),simplify="array")
aaa=unlist(aa)
bb=sapply(1:nrows,pr<-function(x) c(rep(1,dose$mort[x]),rep(0,dose$unmort[x])),simplify="array")
bbb=unlist(bb)
bb
casedose=cbind(aaa,bbb)
casedose
data=split(casedose,row(casedose))
data=split(casedose,row(casedose))
sampsize=2000
cfsnon=matrix(rep(0,sampsize*2),c(sampsize,2))
n=length(data)
ss=sample(data,n,replace=TRUE)
dd=t(matrix(unlist(ss),nrow=2,ncol=n))
View(dd)
ee=table(dd[,1],dd[,2])
sampsize=2000
cfsnon=matrix(rep(0,sampsize*2),c(sampsize,2))
for (j in seq(sampsize))
{
n=length(data)
ss=sample(data,n,replace=TRUE)
# Make the sample into a nx2 matrix
dd=t(matrix(unlist(ss),nrow=2,ncol=n))
# Make the sampled list into a data frame with counts for each concentration
# level found in the sample
ee=table(dd[,1],dd[,2])
# Reestimate the model from the resampled data.
glmsam2=glm(ee[,1:2]~dose$logdose,family=binomial())
cfsnon[j,]=glmsam2$coefficients
}
View(cfsnon)
phonon=cfsnon[,1]/cfsnon[,2]
phonondata=data.frame(phonon)
apply(phonondata,2,function(x) quantile(x,c(0.025,0.975)))
apply(phonondata,2,function(x) quantile(x,c(0.025,0.975),na.rm=TRUE))
apply(phodata,2,function(x) quantile(x,c(0.025,0.975)))
logLik(nullfit)
logLik(glmfit)
2*(logLik(glmfit)-logLik(nullfit))
logLik(glmfit)-logLik(nullfit)
qchisq(5.796136,df=2)
pchisq(5.796136,df=2)
pchisq(5.796136,df=2,lower.tail = FALSE)
pchisq(2*(logLik(glmfit)-logLik(nullfit)),df=2,lower.tail = FALSE)
pchisq(11.59227,df=2,lower.tail = FALSE)
LR4=2*(logLik(glmfit)-logLik(nullfit))
pchisq(LR4,df=2,lower.tail = FALSE)
View(hipptotal)
HIPP[21:41328,]
df=HIPP[21:41328,]
df=hipp[21:41328,]
lmodhis=glm(spikes ~ xN + yN + distance + spikes.hist.1 + spikes.hist.2 + spikes.hist.3
+ spikes.hist.4 + spikes.hist.5 + spikes.hist.6 + spikes.hist.7 + spikes.hist.8
+ spikes.hist.9 + spikes.hist.10 + spikes.hist.11 + spikes.hist.12 + spikes.hist.13
+ spikes.hist.14 + spikes.hist.15 + spikes.hist.16 + spikes.hist.17 + spikes.hist.18
+ spikes.hist.19 + spikes.hist.20, family = binomial, df)
summary(lmodhis)
plot(c(0,6),c(0,1.5),type="n",xlab="log dose",ylab="mortality rate",main="Mortality Rate v.s. Log Dose")
points(dose$logdose,dose$mortality,pch=16)
lines(x,pre$fit)
View(dose)
data(orings)
oringsfit=glm(cbind(damage, 6-damage) ~ temp, family = binomial, orings)
summary(oringsfit)
View(orings)
anova(lmod,lmodimprove,test="Chi")
summary(lmodhis)
anova(lmod,lmodhis,test="Chi")
summary(oringsfit)
install.packages("faraway")
library(faraway)
data(orings)
oringsfit=glm(cbind(damage, 6-damage) ~ temp, family = binomial, orings)
View(orings)
orings$binary = orings$damage
orings[1,3]=1
fit_binary = glm(binary ~ temp, family = binomial, data=orings)
summary(fit_binary)
orings1=subset(orings, binary == 1)
orings0=subset(orings, binary == 0)
orings0rs=orings0[sample(1:nrow(orings0), 7, replace=FALSE),]
oringstotal = rbind(orings1, orings0rs)
fit_remedy = glm(binary ~ temp, family = binomial, data = oringstotal)
summary(fit_remedy)
anova(fit_binary, fit_remedy, test = "Chi")
ee
cfsnon
aa
bb
data
dd
ss
ee
summary(fit_remedy)
sumary(lmod)
library(faraway)
sumary(lmod)
summary(lmod)
lmodinter = glm(spikes ~ xN + yN + xN:yN , family = binomial, data=hipp)
summary(lmodinter)
sumary(lmodinter)
anova(lmod, lmodinter, test = "Chi")
summary(lmodimprove)
anova(lmod,lmodimprove,test="Chi")
hippsub = hipp[1:NROW(hipp) %% 20 == 1, ]
lmodsub <- glm(spikes ~ xN + yN + distance, family = binomial, data=hippsub)
summary(lmodsub)
sumary(lmodsub)
summary(lmodimprove)
sumary(lmodsub)
hipp1=subset(hippsub, spikes == 1)
hipp0=subset(hippsub, spikes == 0)
hipp0rs=hipp0[sample(1:nrow(hipp0), 100, replace=FALSE),]
hipptotal=rbind(hipp1,hipp0rs)
lmodtotal=glm(spikes ~ xN + yN + distance, family = binomial, data=hipptotal)
summary(lmodtotal)
linpred <- predict(lmodimprove)
predprob <- predict(lmodimprove, type="response")
install.packages("dplyr")
library(dplyr)
hippre <- mutate(hipp, residuals=residuals(lmodimprove), linpred=predict(lmodimprove))
gdf <- group_by(hippre, cut(linpred, breaks=unique(quantile(linpred,(1:100)/101))))
diagdf <- summarise(gdf, residuals=mean(residuals), linpred=mean(linpred))
plot(residuals ~ linpred, diagdf, xlab="linear predictor")
linpred <- predict(lmod)
predprob <- predict(lmod, type="response")
hippre <- mutate(hipp, residuals=residuals(lmod), linpred=predict(lmod))
gdf <- group_by(hippre, cut(linpred, breaks=unique(quantile(linpred,(1:100)/101))))
diagdf <- summarise(gdf, residuals=mean(residuals), linpred=mean(linpred))
plot(residuals ~ linpred, diagdf, xlab="linear predictor")
qqnorm(residuals(lmod))
halfnorm(hatvalues(lmod))
View(hipp)
plot(residuals ~ linpred, diagdf, xlab="linear predictor",main="Residual Plot")
qqnorm(residuals(lmod))
halfnorm(hatvalues(lmod))
hipp[34899,]
hipp[34900,]
summary(lmodhis)
linpredhis <- predict(lmodhis)
predprobhis <- predict(lmodhis, type="response")
dfsm <- na.omit(df)
dfsm <- mutate(dfsm, predprobhis=predict(lmodhis,type="response"))
gdf <- group_by(dfsm, cut(linpredhis, breaks=unique(quantile(linpredhis,(1:100)/101))))
hldf <- summarise(gdf, y=sum(y), ppred=mean(predprobhis), count=n())
View(df)
hldf <- summarise(gdf, spikes=sum(spikes), ppred=mean(predprobhis), count=n())
hldf <- mutate(hldf, se.fit=sqrt(ppred*(1-ppred)/count))
install.packages("ggplot2")
library(ggplot2)
ggplot(hldf,aes(x=ppred,spikes=spikes/count,spikesmin=spikes/count-2*se.fit,spikesmax=spikes/count+2*se.fit))
+geom_point()+geom_linerange(color=grey(0.75))+geom_abline(intercept=0,slope=1)
ggplot(hldf,aes(x=ppred,spikes=spikes/count,spikesmin=spikes/count-2*se.fit,spikesmax=
spikes/count+2*se.fit))
+geom_point()+geom_linerange(color=grey(0.75))+geom_abline(intercept=0,slope=1)
ggplot(hldf,aes(x=ppred,spikes=spikes/count,spikesmin=spikes/count-2*se.fit,spikesmax=
spikes/count+2*se.fit))
+geom_linerange(color=grey(0.75))+geom_abline(intercept=0,slope=1)
+xlab("Predicted Probability")+ylab("Observed Proportion")
ggplot(hldf,aes(x=ppred,spikes=spikes/count,spikesmin=spikes/count-2*se.fit,spikesmax=
spikes/count+2*se.fit))+
geom_point() + geom_linerange(color=grey(0.75)) + geom_abline(intercept=0,slope=1) +
xlab("Predicted Probability")+ylab("Observed Proportion")
ggplot(hldf,aes(x=ppred,y=spikes/count,spikesmin=spikes/count-2*se.fit,spikesmax=
spikes/count+2*se.fit))+
geom_point() + geom_linerange(color=grey(0.75)) + geom_abline(intercept=0,slope=1) +
xlab("Predicted Probability")+ylab("Observed Proportion")
ggplot(hldf,aes(x=ppred,y=ymin/count,ymin=spikes/count-2*se.fit,ymax=
spikes/count+2*se.fit))+
geom_point() + geom_linerange(color=grey(0.75)) + geom_abline(intercept=0,slope=1) +
xlab("Predicted Probability")+ylab("Observed Proportion")
ggplot(hldf,aes(x=ppred,y=y/count,ymin=spikes/count-2*se.fit,ymax=
spikes/count+2*se.fit))+
geom_point() + geom_linerange(color=grey(0.75)) + geom_abline(intercept=0,slope=1) +
xlab("Predicted Probability")+ylab("Observed Proportion")
ggplot(hldf,aes(x=ppred,y=spikes/count,ymin=spikes/count-2*se.fit,ymax=
spikes/count+2*se.fit))+
geom_point() + geom_linerange(color=grey(0.75)) + geom_abline(intercept=0,slope=1) +
xlab("Predicted Probability")+ylab("Observed Proportion")
hlstat <- with(hldf, sum((spikes-count*ppred)^2/(count*ppred*(1-ppred))))
c(hlstat, nrow(hldf))
lmodhis=glm(spikes ~ xN + yN + distance + spikes.hist.1 + spikes.hist.2 + spikes.hist.3
+ spikes.hist.4 + spikes.hist.5 + spikes.hist.6 + spikes.hist.7 + spikes.hist.8
+ spikes.hist.9 + spikes.hist.10 + spikes.hist.11 + spikes.hist.12 + spikes.hist.13
+ spikes.hist.14 + spikes.hist.15 + spikes.hist.16 + spikes.hist.17 + spikes.hist.18
+ spikes.hist.19 + spikes.hist.20, family = binomial, data=hipp)
summary(lmodhis)
linpredhis <- predict(lmodhis)
predprobhis <- predict(lmodhis, type="response")
dfsm <- na.omit(df)
dfsm <- mutate(dfsm, predprobhis=predict(lmodhis,type="response"))
gdf <- group_by(dfsm, cut(linpredhis, breaks=unique(quantile(linpredhis,(1:100)/101))))
dfsm <- na.omit(hipp)
dfsm <- mutate(dfsm, predprobhis=predict(lmodhis,type="response"))
gdf <- group_by(dfsm, cut(linpredhis, breaks=unique(quantile(linpredhis,(1:100)/101))))
hldf <- summarise(gdf, spikes=sum(spikes), ppred=mean(predprobhis), count=n())
hldf <- mutate(hldf, se.fit=sqrt(ppred*(1-ppred)/count))
ggplot(hldf,aes(x=ppred,y=spikes/count,ymin=spikes/count-2*se.fit,ymax=
spikes/count+2*se.fit))+
geom_point() + geom_linerange(color=grey(0.75)) + geom_abline(intercept=0,slope=1) +
xlab("Predicted Probability")+ylab("Observed Proportion")
hlstat <- with(hldf, sum((spikes-count*ppred)^2/(count*ppred*(1-ppred))))
c(hlstat, nrow(hldf))
1-pchisq(111.7794, 100-1)
anova(lmod,lmodhis,test="Chi")
summary(lmodhis)
plot(c(0,6),c(0,1.5),type="n",xlab="log dose",ylab="mortality rate",main="Mortality Rate v.s. Log Dose")
points(dose$logdose,dose$mortality,pch=16)
sumary(glmfit)
View(dose)
glmfit = glm(cbind(mort,unmort) ~ logdose, family = binomial(), data=dose)
sumary(glmfit)
x = seq(0,6,0.1)
pre=predict(glmfit,data.frame(logdose=x),type="response",se.fit=TRUE)
lines(x,pre$fit)
LD50=-glmfit$coef[1]/glmfit$coef[2]
glmfitsum=summary(glmfit)
dr <- c(-1/glmfit$coef[2],glmfit$coef[1]/glmfit$coef[2]^2)
se = sqrt(dr %*% glmfitsum$cov.un %*% dr)[,]
c(LD50-1.96*se,LD50+1.96*se)
glmfit = glm(cbind(mort,unmort) ~ logdose, family = binomial(), data=dose)
sumary(glmfit)
LD50
se
cm = vcov(glmfit)
a = glmfit$coef[2]^2-1.96^2*cm[2,2]
b = 2*(1.96^2*cm[1,2]-glmfit$coef[1]*glmfit$coef[2])
c = glmfit$coef[1]^2-1.96^2*cm[1,1]
ro2 = (-b + sqrt(b^2-4*a*c))/(2*a)
ro1 = (-b - sqrt(b^2-4*a*c))/(2*a)
CI = c(ro1, ro2)
CI
preds=matrix(glmfit$fitted.values)
nums=dose$total
set.seed(123)
sampsiz=2000
cfs=matrix(rep(0,sampsiz*2),c(sampsiz,2))
for (j in seq(sampsiz))
{
aff=mapply(rbinom,rep(1,length(nums)),nums,preds)
unaff=nums-aff
glmsam1=glm(cbind(aff,unaff)~dose$logdose, family=binomial())
cfs[j,]=glmsam1$coefficients
}
pho=cfs[,1]/cfs[,2]
phodata=data.frame(pho)
apply(phodata,2,function(x) quantile(x,c(0.025,0.975)))
nrows=dim(dose)[1]
aa=sapply(1:nrows,pr<-function(x) rep(dose$logdose[x],dose$total[x]),simplify="array")
aaa=unlist(aa)
bb=sapply(1:nrows,pr<-function(x) c(rep(1,dose$mort[x]),rep(0,dose$unmort[x])),simplify="array")
bbb=unlist(bb)
casedose=cbind(aaa,bbb)
data=split(casedose,row(casedose))
sampsize=1000
cfsnon=matrix(rep(0,sampsize*2),c(sampsize,2))
for (j in seq(sampsize))
{
n=length(data)
ss=sample(data,n,replace=TRUE)
# Make the sample into a nx2 matrix
dd=t(matrix(unlist(ss),nrow=2,ncol=n))
# Make the sampled list into a data frame with counts for each concentration
# level found in the sample
ee=table(dd[,1],dd[,2])
# Reestimate the model from the resampled data.
glmsam2=glm(ee[,1:2]~dose$logdose,family=binomial())
cfsnon[j,]=glmsam2$coefficients
}
set.seed(123)
sampsize=500
cfsnon=matrix(rep(0,sampsize*2),c(sampsize,2))
for (j in seq(sampsize))
{
n=length(data)
ss=sample(data,n,replace=TRUE)
# Make the sample into a nx2 matrix
dd=t(matrix(unlist(ss),nrow=2,ncol=n))
# Make the sampled list into a data frame with counts for each concentration
# level found in the sample
ee=table(dd[,1],dd[,2])
# Reestimate the model from the resampled data.
glmsam2=glm(ee[,1:2]~dose$logdose,family=binomial())
cfsnon[j,]=glmsam2$coefficients
}
set.seed(123)
sampsize=1000
cfsnon=matrix(rep(0,sampsize*2),c(sampsize,2))
for (j in seq(sampsize))
{
n=length(data)
ss=sample(data,n,replace=TRUE)
# Make the sample into a nx2 matrix
dd=t(matrix(unlist(ss),nrow=2,ncol=n))
# Make the sampled list into a data frame with counts for each concentration
# level found in the sample
ee=table(dd[,1],dd[,2])
# Reestimate the model from the resampled data.
glmsam2=glm(ee[,1:2]~dose$logdose,family=binomial())
cfsnon[j,]=glmsam2$coefficients
}
set.seed(123)
sampsize=500
cfsnon=matrix(rep(0,sampsize*2),c(sampsize,2))
for (j in seq(sampsize))
{
n=length(data)
ss=sample(data,n,replace=TRUE)
# Make the sample into a nx2 matrix
dd=t(matrix(unlist(ss),nrow=2,ncol=n))
# Make the sampled list into a data frame with counts for each concentration
# level found in the sample
ee=table(dd[,1],dd[,2])
# Reestimate the model from the resampled data.
glmsam2=glm(ee[,1:2]~dose$logdose,family=binomial())
cfsnon[j,]=glmsam2$coefficients
}
phonon=cfsnon[,1]/cfsnon[,2]
phonondata=data.frame(phonon)
apply(phonondata,2,function(x) quantile(x,c(0.025,0.975),na.rm=TRUE))
preds=matrix(glmfit$fitted.values)
nums=dose$total
set.seed(123)
sampsiz=500
cfs=matrix(rep(0,sampsiz*2),c(sampsiz,2))
for (j in seq(sampsiz))
{
aff=mapply(rbinom,rep(1,length(nums)),nums,preds)
unaff=nums-aff
glmsam1=glm(cbind(aff,unaff)~dose$logdose, family=binomial())
cfs[j,]=glmsam1$coefficients
}
pho=cfs[,1]/cfs[,2]
phodata=data.frame(pho)
apply(phodata,2,function(x) quantile(x,c(0.025,0.975)))
summary(nullfit)
sumary(nullfit)
dose$logdosenull = dose$logdose - 4
nullfit=glm(cbind(mort,unmort) ~ logdosenull - 1, family = binomial,data = dose)
LR4=2*(logLik(glmfit)-logLik(nullfit))
pchisq(LR4,df=2,lower.tail = FALSE)
sumary(nullfit)
LR4
pchisq(11.59227,df=2,lower.tail = FALSE)
pchisq(11.59227,df=1,lower.tail = FALSE)
ggplot(hldf,aes(x=ppred,y=spikes/count,ymin=spikes/count-2*se.fit,ymax=
spikes/count+2*se.fit))+
geom_point() + geom_linerange(color=grey(0.75)) + geom_abline(intercept=0,slope=1) +
xlab("Predicted Probability")+ylab("Observed Proportion")
linpred <- predict(lmod)
predprob <- predict(lmod, type="response")
hippsm <- na.omit(hipp)
hippsm <- mutate(hippsm, predprob=predict(lmod,type="response"))
ghipp <- group_by(hippsm, cut(linpred, breaks=unique(quantile(linpred,(1:100)/101))))
hlhipp <- summarise(ghipp, spikes=sum(spikes), ppred=mean(predprob), count=n())
hlhipp <- mutate(hlhipp, se.fit=sqrt(ppred*(1-ppred)/count))
ggplot(hlhipp,aes(x=ppred,y=spikes/count,ymin=spikes/count-2*se.fit,ymax=
spikes/count+2*se.fit))+
geom_point() + geom_linerange(color=grey(0.75)) + geom_abline(intercept=0,slope=1) +
xlab("Predicted Probability")+ylab("Observed Proportion")
hlstath <- with(hlhipp, sum((spikes-count*ppred)^2/(count*ppred*(1-ppred))))
c(hlstath, nrow(hlhipp))
1-pchisq(827.1726, 100-1)
hh = 1-pchisq(827.1726, 100-1)
linpred <- predict(lmodimprove)
predprob <- predict(lmodimprove, type="response")
hippsm <- na.omit(hipp)
hippsm <- mutate(hippsm, predprob=predict(lmod,type="response"))
ghipp <- group_by(hippsm, cut(linpred, breaks=unique(quantile(linpred,(1:100)/101))))
hlhipp <- summarise(ghipp, spikes=sum(spikes), ppred=mean(predprob), count=n())
hlhipp <- mutate(hlhipp, se.fit=sqrt(ppred*(1-ppred)/count))
ggplot(hlhipp,aes(x=ppred,y=spikes/count,ymin=spikes/count-2*se.fit,ymax=
spikes/count+2*se.fit))+
geom_point() + geom_linerange(color=grey(0.75)) + geom_abline(intercept=0,slope=1) +
xlab("Predicted Probability")+ylab("Observed Proportion")
hlstath <- with(hlhipp, sum((spikes-count*ppred)^2/(count*ppred*(1-ppred))))
c(hlstath, nrow(hlhipp))
1-pchisq(827.1726, 100-1)
ggplot(hldf,aes(x=ppred,y=spikes/count,ymin=spikes/count-2*se.fit,ymax=
spikes/count+2*se.fit))+
geom_point() + geom_linerange(color=grey(0.75)) + geom_abline(intercept=0,slope=1) +
xlab("Predicted Probability")+ylab("Observed Proportion")
data(orings)
oringsfit=glm(cbind(damage, 6-damage) ~ temp, family = binomial, orings)
summary(oringsfit)
sumary(oringsfit)
orings$binary = orings$damage
orings[1,3]=1
fit_binary = glm(binary ~ temp, family = binomial, data=orings)
sumary(fit_binary)
View(orings)
linpred <- predict(lmodimprove)
predprob <- predict(lmodimprove, type="response")
hippsm <- na.omit(hipp)
hippsm <- mutate(hippsm, predprob=predict(lmodimprove,type="response"))
ghipp <- group_by(hippsm, cut(linpred, breaks=unique(quantile(linpred,(1:100)/101))))
hlhipp <- summarise(ghipp, spikes=sum(spikes), ppred=mean(predprob), count=n())
hlhipp <- mutate(hlhipp, se.fit=sqrt(ppred*(1-ppred)/count))
ggplot(hlhipp,aes(x=ppred,y=spikes/count,ymin=spikes/count-2*se.fit,ymax=
spikes/count+2*se.fit))+
geom_point() + geom_linerange(color=grey(0.75)) + geom_abline(intercept=0,slope=1) +
xlab("Predicted Probability")+ylab("Observed Proportion")
summary(lmodimprove)
ggplot(hldf,aes(x=ppred,y=spikes/count,ymin=spikes/count-2*se.fit,ymax=
spikes/count+2*se.fit))+
geom_point() + geom_linerange(color=grey(0.75)) + geom_abline(intercept=0,slope=1) +
xlab("Predicted Probability")+ylab("Observed Proportion")
linpred <- predict(lmodimprove)
predprob <- predict(lmodimprove, type="response")
hippsm <- na.omit(hipp)
hippsm <- mutate(hippsm, predprob=predict(lmodimprove,type="response"))
ghipp <- group_by(hippsm, cut(linpred, breaks=unique(quantile(linpred,(1:100)/101))))
hlhipp <- summarise(ghipp, y=sum(spikes), ppred=mean(predprob), count=n())
hlhipp <- mutate(hlhipp, se.fit=sqrt(ppred*(1-ppred)/count))
ggplot(hlhipp,aes(x=ppred,y=y/count,ymin=y/count-2*se.fit,ymax=
y/count+2*se.fit))+
geom_point() + geom_linerange(color=grey(0.75)) + geom_abline(intercept=0,slope=1) +
xlab("Predicted Probability")+ylab("Observed Proportion")
linpred <- predict(lmodimprove)
predprob <- predict(lmodimprove, type="response")
hippsm <- na.omit(hipp)
hippsm <- mutate(hippsm, predprob=predict(lmodimprove,type="response"))
ghipp <- group_by(hippsm, cut(linpred, breaks=unique(quantile(linpred,(1:100)/101))))
hlhipp <- summarise(ghipp, y=sum(spikes), ppred=mean(predprob), count=n())
hlhipp <- mutate(hlhipp, se.fit=sqrt(ppred*(1-ppred)/count))
ggplot(hlhipp,aes(x=ppred,y=y/count,ymin=y/count-2*se.fit,ymax=
y/count+2*se.fit))+
geom_point() + geom_linerange(color=grey(0.75)) + geom_abline(intercept=0,slope=1) +
xlab("Predicted Probability")+ylab("Observed Proportion")
View(hlhipp)
linpred <- predict(lmodimprove)
predprob <- predict(lmodimprove, type="response")
hippsm <- na.omit(hipp)
hippsm <- mutate(hippsm, predprob=predict(lmodimprove,type="response"))
ghipp <- group_by(hippsm, cut(linpred, breaks=unique(quantile(linpred,(1:100)/101))))
hlhipp <- summarise(ghipp, spikes=sum(spikes), ppred=mean(predprob), count=n())
hlhipp <- mutate(hlhipp, se.fit=sqrt(ppred*(1-ppred)/count))
ggplot(hlhipp,aes(x=ppred,y=spikes/count,ymin=spikes/count-2*se.fit,ymax=
spikes/count+2*se.fit))+
geom_point() + geom_linerange(color=grey(0.75)) + geom_abline(intercept=0,slope=1) +
xlab("Predicted Probability")+ylab("Observed Proportion")
cm
cm
View(dose)
